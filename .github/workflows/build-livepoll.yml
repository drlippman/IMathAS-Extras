name: build-and-push
env:
  LIVEPOLL_ECR_REPOSITORY: livepoll
  PANDOC_ECR_REPOSITORY: pandoc
on:
  pull_request:
    types: [ opened, synchronize, reopened ]
  push:
    branches:
    - main
    - rc/**

jobs:
  # this job gets a password for public ECR to use in future steps
  ecr-public-auth:
    runs-on: ubuntu-latest
    name: Login to Public ECR
    timeout-minutes: 5
    permissions:
      id-token: write   # Used for AWS OIDC auth
    outputs:
      ECR_PASSWORD: ${{ steps.ecr-auth.outputs.ECR_PASSWORD }}
    steps:
      # This is required to role chain from the OIDC role to other cross-account roles
      # https://github.com/aws-actions/configure-aws-credentials/issues/279
      - name: OIDC Auth
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-west-2
          role-to-assume: arn:aws:iam::265299512749:role/ci-oidc-role
          role-session-name: github-actions
          role-duration-seconds: 900

      - name: Assume role in CI Account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ env.AWS_SESSION_TOKEN }}
          aws-region: us-west-2
          role-to-assume: arn:aws:iam::824635284302:role/ci-role
          role-session-name: github-actions
          role-duration-seconds: 1200
      
      - name: Set Public ECR Auth
        id: ecr-auth
        run: echo "ECR_PASSWORD=$(aws ecr-public --region us-east-1 get-login-password)" >> $GITHUB_OUTPUT
    
  validate-terraform:
    runs-on: ubuntu-latest
    name: Validate Terraform
    timeout-minutes: 5
    permissions:
      id-token: write   # Used for AWS OIDC auth
      contents: read
      actions: read
    steps:
    - uses: actions/checkout@v4
      name: Checkout project
    
    - name: OIDC Auth to AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-west-2
        role-to-assume: arn:aws:iam::${{ secrets.aws_user_account }}:role/ci-oidc-role
        role-session-name: github-actions
        role-duration-seconds: 900

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      id: init
      run: terraform init -backend=false
      working-directory: deploy/terraform

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      working-directory: deploy/terraform

  build-and-push-livepoll:
    runs-on: ubuntu-latest
    name: Build and Push Livepoll Docker Image
    timeout-minutes: 30
    needs: [ecr-public-auth, validate-terraform]
    permissions:
      id-token: write   # Used for AWS OIDC auth
      contents: read
      actions: read
    steps:
    - uses: actions/checkout@v4
      name: Checkout project
    
    - id: read_tree_hash
      name: Read git tree hash
      run: |
        tree_hash=$(git rev-parse HEAD:)
        echo "tree_hash=$tree_hash" >> $GITHUB_OUTPUT
    
    - id: set_branch_name
      name: Read git branch name
      run: |
        branch_name=${GITHUB_REF##*/}
        echo "branch_name=$branch_name" >> $GITHUB_OUTPUT

    - uses: ./.github/actions/private-ecr-login
      name: Login to Private ECR
      id: login-ecr
    
    - name: Login to Public ECR
      uses: docker/login-action@v3
      with:
        registry: public.ecr.aws/j7v6u1e0
        username: AWS
        password: ${{ needs.ecr-public-auth.outputs.ECR_PASSWORD }}
    
    - name: Check for prebuilt image
      id: prebuilt_check
      run: |
        docker manifest inspect ${{ steps.login-ecr.outputs.registry }}/${{ env.LIVEPOLL_ECR_REPOSITORY }}:gha-tree-${{ steps.read_tree_hash.outputs.tree_hash }} || echo "image_exists=$?" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      if: steps.prebuilt_check.outputs.image_exists != 0
    
    - name: Docker build and push
      uses: docker/build-push-action@v5
      if: steps.prebuilt_check.outputs.image_exists != 0
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      with:
        context: .
        file: docker/Dockerfile-livepoll
        platforms: linux/amd64
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.LIVEPOLL_ECR_REPOSITORY }}:gha-commit-${{ github.sha }}
          ${{ steps.login-ecr.outputs.registry }}/${{ env.LIVEPOLL_ECR_REPOSITORY }}:gha-tree-${{ steps.read_tree_hash.outputs.tree_hash }}
          ${{ steps.login-ecr.outputs.registry }}/${{ env.LIVEPOLL_ECR_REPOSITORY }}:gha-build-${{ steps.set_branch_name.outputs.branch_name }}-${{ github.run_number }}-${{ github.run_attempt }}
          ${{ steps.login-ecr.outputs.registry }}/${{ env.LIVEPOLL_ECR_REPOSITORY }}:gha-build-${{ steps.set_branch_name.outputs.branch_name }}-latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-and-push-pandoc:
    runs-on: ubuntu-latest
    name: Build and Push Pandoc Docker Image
    timeout-minutes: 30
    needs: [ecr-public-auth, validate-terraform]
    permissions:
      id-token: write   # Used for AWS OIDC auth
      contents: read
      actions: read
    steps:
    - uses: actions/checkout@v4
      name: Checkout project
    
    - id: read_tree_hash
      name: Read git tree hash
      run: |
        tree_hash=$(git rev-parse HEAD:)
        echo "tree_hash=$tree_hash" >> $GITHUB_OUTPUT
    
    - id: set_branch_name
      name: Read git branch name
      run: |
        branch_name=${GITHUB_REF##*/}
        echo "branch_name=$branch_name" >> $GITHUB_OUTPUT

    - uses: ./.github/actions/private-ecr-login
      name: Login to Private ECR
      id: login-ecr
    
    - name: Login to Public ECR
      uses: docker/login-action@v3
      with:
        registry: public.ecr.aws/j7v6u1e0
        username: AWS
        password: ${{ needs.ecr-public-auth.outputs.ECR_PASSWORD }}
    
    - name: Check for prebuilt image
      id: prebuilt_check
      run: |
        docker manifest inspect ${{ steps.login-ecr.outputs.registry }}/${{ env.PANDOC_ECR_REPOSITORY }}:gha-tree-${{ steps.read_tree_hash.outputs.tree_hash }} || echo "image_exists=$?" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      if: steps.prebuilt_check.outputs.image_exists != 0
    
    - name: Docker build and push
      uses: docker/build-push-action@v5
      if: steps.prebuilt_check.outputs.image_exists != 0
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      with:
        context: .
        file: docker/Dockerfile-pandoc
        target: pandoc
        platforms: linux/amd64
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.PANDOC_ECR_REPOSITORY }}:gha-commit-${{ github.sha }}
          ${{ steps.login-ecr.outputs.registry }}/${{ env.PANDOC_ECR_REPOSITORY }}:gha-tree-${{ steps.read_tree_hash.outputs.tree_hash }}
          ${{ steps.login-ecr.outputs.registry }}/${{ env.PANDOC_ECR_REPOSITORY }}:gha-build-${{ steps.set_branch_name.outputs.branch_name }}-${{ github.run_number }}-${{ github.run_attempt }}
          ${{ steps.login-ecr.outputs.registry }}/${{ env.PANDOC_ECR_REPOSITORY }}:gha-build-${{ steps.set_branch_name.outputs.branch_name }}-latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Docker build and push
      uses: docker/build-push-action@v5
      if: steps.prebuilt_check.outputs.image_exists != 0
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      with:
        context: .
        file: docker/Dockerfile-pandoc
        target: cron
        platforms: linux/amd64
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.PANDOC_ECR_REPOSITORY }}:gha-commit-${{ github.sha }}-cron
          ${{ steps.login-ecr.outputs.registry }}/${{ env.PANDOC_ECR_REPOSITORY }}:gha-tree-${{ steps.read_tree_hash.outputs.tree_hash }}-cron
          ${{ steps.login-ecr.outputs.registry }}/${{ env.PANDOC_ECR_REPOSITORY }}:gha-build-${{ steps.set_branch_name.outputs.branch_name }}-${{ github.run_number }}-${{ github.run_attempt }}-cron
          ${{ steps.login-ecr.outputs.registry }}/${{ env.PANDOC_ECR_REPOSITORY }}:gha-build-${{ steps.set_branch_name.outputs.branch_name }}-latest-cron
        cache-from: type=gha
        cache-to: type=gha,mode=max